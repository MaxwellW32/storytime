.gameMakerDisplayDivs {}





.crossWordMain {
    color: var(--textColor);
    padding: 1rem;
    display: grid;
}

.crossWordMain label {
    color: var(--textColor);
}

.crossWordMain input {
    background-color: var(--textColorAnti);
}

.crossWordMain p {
    color: var(--textColor);
}

.spawnArea {
    display: grid;
    margin: 0 auto;
    user-select: none;
    width: 100%;
    text-transform: uppercase;
}

.tile {
    background-color: var(--thirdColor);
    display: grid;
    align-items: center;
    justify-items: center;
}

.leftToFind {
    text-align: center;
    margin: 1rem;
}

.correct {
    animation: lift 1s alternate ease;
}


.incorrect {
    animation: shake 2500ms alternate ease;
    background-color: grey;
}

.quickShake {
    animation: quickShake 40ms infinite alternate;
}

@keyframes quickShake {
    to {
        rotate: 7deg;
    }
}


@keyframes lift {
    to {
        translate: 40px 0;
    }
}

@keyframes shake {
    0% {
        rotate: 0deg;
    }

    50% {
        rotate: 15deg;
    }

    100% {
        rotate: -15deg;
    }
}










/* matchup gm */
.gmMainDiv {
    display: grid;
    gap: 1rem;
    padding: .5rem 0 .5rem 0;
    border-radius: 1rem;
    width: 100%;
}

.questionInputMapCont {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: 70%;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
}

.gmMainDiv label {
    color: var(--textColor);
    margin: .2rem 0 .2rem 0;
}

.questionDiv {
    scroll-snap-align: start;
}

.questionDiv svg {
    cursor: pointer;
}

.questionDiv svg:hover {
    scale: 1.05;
}

.deleteQuestion {
    width: var(--nav-icon-size);
    fill: var(--textColor);
    position: relative;
    translate: 0 -5px;
    rotate: 10deg;
}

.deleteChoice {
    width: calc(var(--nav-icon-size) / 1.2);
    fill: var(--secondaryColor)
}

.questionDiv {
    padding: .5rem;
}

.questionDiv input {
    background-color: var(--textColorAnti);
    color: var(--textColor);
}

.choicesMapCont {
    display: flex;
    column-gap: 1rem;
    flex-wrap: wrap;
}

.choiceInputDiv {
    display: flex;
    gap: .5rem;
}

.choiceInputDiv svg {
    fill: var(--thirdColor);

}

.questionsGrid {
    display: grid;
    grid-auto-columns: 48%;
    grid-auto-flow: column;
    grid-template-rows: 30dvh 30dvh;
    padding: 1rem;
    gap: 1rem;
    text-align: center;
    overflow-y: auto;
}

.eachQuestionCont {
    border-radius: .5rem;
    overflow-y: auto;
    display: grid;
    justify-items: center;
    align-items: flex-start;
    gap: 1rem;
    padding: 1rem;
    border-bottom: 2px solid var(--thirdColor);
    background-color: var(--textColorAnti);
    font-weight: bold;
}


.choiceDisplayMapCont {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
    align-items: flex-start;
    padding: 1rem;
}

.eachChoice {
    padding: 1rem;
    background-color: var(--thirdColor);
    color: var(--textColorAnti);
    border-radius: .7rem;
    max-width: 200px;
    text-align: center;
    cursor: move;
    user-select: none;
}








/* pronounce GM*/
.pronounceMainDiv {
    text-align: center;
    min-height: 300px;
    display: grid;
    grid-auto-flow: column;
    gap: 1rem;
    display: grid;
    grid-template-columns: 1fr 1fr;
}

.highlightText {
    background-color: pink;
}

.probuttonholderread button {
    background-color: var(--thirdColor);
}

.probuttonholder button {
    width: 100%;
    margin: 0 auto;
    max-width: 400px;
}

.bright {
    filter: brightness(.4) !important;
    transition: filter none;
}




/* WordsToMeaning GM*/

.wordMeaningMainDiv {
    overflow-x: hidden;
    display: flex;
    flex-direction: column;
}

.wordMeaningMainDiv input {
    background-color: var(--textColorAnti);
}

.wordMeaningMainDiv label {
    color: var(--textColor);
}

.wordMeaningMapCont {
    overflow-x: auto;
    display: grid;
    gap: 2rem;
    padding: 1rem;
    grid-auto-flow: column;
    grid-auto-columns: 40%;
}

.eachWordMEaningDiv>div {
    display: flex;
    flex-direction: column;
}


.DisplayWordMeaningsMainDiv {
    color: white;
    /* height: 100dvh; */
    display: flex;
    flex-direction: column;
}

.DisplayWordMeaningsMainDiv>div {
    flex: 1;
    display: flex;
    flex-direction: column;
}



.displayWordMeaningsMapCont {
    display: grid;
    grid-auto-columns: min(350px, 100%);
    grid-template-rows: 200px 200px;
    grid-auto-flow: column;
    overflow-x: auto;
    flex: 1;
    gap: 1rem;
    padding: 1rem;
}




.displayWordMeaningsMapCont>div {
    overflow-y: auto;
    white-space: pre-wrap;
    display: grid;
    justify-items: center;
    align-items: center;
    grid-template-rows: 1fr 10%;
    padding: 1rem;
    gap: .5rem;
    border-radius: 1rem;
    color: var(--textColor);
}


.closeWord {
    display: none;
    fill: var(--textColor);
    height: 100%;
    max-height: 1.5rem;
    translate: 3px 0;
}

.displayWordMeaningsMapCont>div:has(.displayWordsMapwords) .closeWord {
    display: block;
}

.displayWordsMap::-webkit-scrollbar {
    /* display: none; */
}

.displayWordsMap {
    display: flex;
    gap: 1rem;
    overflow-x: auto;
    padding: 1rem;

}



.displayWordsMapwordsCont {
    position: relative;
    align-self: center;
}

.displayWordsMapwordsCont:hover>svg {
    opacity: 1;
}



.displayWordMeaningsMapCont .displayWordsMapwordsCloseBttn {
    display: block;
}

.displayWordsMapwordsCloseBttn {
    display: none;
}

.displayWordsMapwords {
    cursor: move;
    user-select: none;
    padding: 1rem;
    background-color: var(--thirdColor);
    border-radius: .5rem;
}


.displayWordsMapwords::selection {
    background-color: transparent;
}